datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  username     String? @unique
  image        String?
  passwordHash String?
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt

  ParkingLot ParkingLot[]
}

model ParkingLot {
  id        String    @id @default(cuid())
  name      String
  location  String?
  image     String?
  ownerId   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  User        User          @relation(fields: [ownerId], references: [id])
  ParkingZone ParkingZone[]
}

model ParkingZone {
  id           String    @id @default(cuid())
  zoneCode     String
  bikeSpace    Int
  carSpace     Int
  parkingLotId String
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  parkingLot    ParkingLot      @relation(fields: [parkingLotId], references: [id])
  MonthlyTicket MonthlyTicket[]
  ParkingTicket ParkingTicket[]
}

model Vehicle {
  id           String  @id @default(cuid())
  licensePlate String
  type         String
  color        String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  MonthlyTicket MonthlyTicket[]
  ParkingTicket ParkingTicket[]
}

model MonthlyTicket {
  id            String    @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  parkingZoneId String
  vehicleId     String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  ParkingZone ParkingZone @relation(fields: [parkingZoneId], references: [id])
  Vehicle     Vehicle     @relation(fields: [vehicleId], references: [id])
}

model ParkingTicket {
  id            String    @id @default(cuid())
  tiketCode     String
  parkingAt     DateTime
  takingAt      DateTime?
  parkingZoneId String
  vehicleId     String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  ParkingZone ParkingZone @relation(fields: [parkingZoneId], references: [id])
  Vehicle     Vehicle     @relation(fields: [vehicleId], references: [id])
  Invoice     Invoice[]
}

model Invoice {
  id String @id @default(cuid())

  amount        Decimal @db.Decimal(10, 2)
  paymentMethod String
  status        String

  parkingTicket   ParkingTicket @relation(fields: [parkingTicketId], references: [id])
  parkingTicketId String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
